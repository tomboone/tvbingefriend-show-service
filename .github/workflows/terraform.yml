name: Terraform Infrastructure Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  TF_VAR_resource_group_name: ${{ secrets.AZURE_RESOURCE_GROUP }}
  TF_VAR_app_service_plan_name: ${{ secrets.AZURE_APP_SERVICE_PLAN }}
  TF_VAR_mysql_server_name: ${{ secrets.AZURE_MYSQL_SERVER }}
  TF_WORKING_DIR: ./terraform
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  deploy-infrastructure:
    name: Deploy Terraform Infrastructure
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_SA }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=tvbingefriend-show-service.terraform.tfstate"

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

      - name: Grant DB Access to Managed Identities
        id: grant_db_access
        run: |
          echo "Granting DB access to Production and Stage slots..."
          RG_NAME="${{ secrets.AZURE_RESOURCE_GROUP }}"
          MYSQL_SERVER_NAME="${{ secrets.AZURE_MYSQL_SERVER }}"
          
          PROD_FUNCTION_NAME="tvbingefriend-show-service"
          PROD_DB_NAME="tvbingefriend_show_service"
          PROD_DB_USER="tvbingefriend-show-service"

          STAGE_DB_NAME="tvbingefriend_show_service-stage"
          STAGE_DB_USER="tvbingefriend-show-service-stage"

          echo "Getting Managed Identity IDs..."
          PROD_MI_ID=$(az functionapp identity show --name $PROD_FUNCTION_NAME --resource-group $RG_NAME --query principalId -o tsv)
          STAGE_MI_ID=$(az functionapp identity show --name $PROD_FUNCTION_NAME --slot stage --resource-group $RG_NAME --query principalId -o tsv)

          echo "Granting access to Production DB..."
          PROD_SQL="DROP USER IF EXISTS '$PROD_DB_USER'; CREATE AADUSER '$PROD_DB_USER' IDENTIFIED BY '$PROD_MI_ID'; GRANT ALL PRIVILEGES ON \`$PROD_DB_NAME\`.* TO '$PROD_DB_USER'@'%';"
          az mysql flexible-server execute --name "$MYSQL_SERVER_NAME" \
            --admin-user "${{ secrets.MYSQL_ADMIN_USER }}" \
            --admin-password "${{ secrets.MYSQL_ADMIN_PASSWORD }}" \
            --database-name "$PROD_DB_NAME" \
            --sql "$PROD_SQL"

          echo "Granting access to Stage DB..."
          STAGE_SQL="DROP USER IF EXISTS '$STAGE_DB_USER'; CREATE AADUSER '$STAGE_DB_USER' IDENTIFIED BY '$STAGE_MI_ID'; GRANT ALL PRIVILEGES ON \`$STAGE_DB_NAME\`.* TO '$STAGE_DB_USER'@'%';"
          az mysql flexible-server execute --name "$MYSQL_SERVER_NAME" \
            --admin-user "${{ secrets.MYSQL_ADMIN_USER }}" \
            --admin-password "${{ secrets.MYSQL_ADMIN_PASSWORD }}" \
            --database-name "$STAGE_DB_NAME" \
            --sql "$STAGE_SQL"
